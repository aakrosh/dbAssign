#!/usr/bin/env python

"""
    usage:
        find_concordant_assignments [options] reference.fa aln1.bam aln2.bam

    where the options are:
        -h,--help : print usage and quit
        -d,--debug: print debug information
        -c,--minCoverage: min. coverage of read required for an alignmnt [90]
        -i,--minIdentity: min. identity of read required for an alignment [95]
        -t,--taxonFile: get the GI <-> Taxon mapping in this file [None]
        -u,--updateTaxonFile: update the taxonFile is an entry is missing [False]
        -p,--numProcesses: run this in parallel as these many processes [1]
        -s,--chunkSize: each process should process these many reads [100000]
    
    By default, the GI <-> Taxon mapping is found using eutils. If you provide 
    a taxonFile, then it is used. If an entry in the taxon file is missing, then
    the tool tries to update it, if the argument -u is used in conjuction with
    the -t argument. I strongly recommend using a taxon file which can easily be
    generated using update_taxid_db included with this project.
"""

from sys import argv, stderr, stdin, exit, stdout
from getopt import getopt, GetoptError
from math import log, exp
from subprocess import check_output
from multiprocessing import Pool, Manager

from fasta import *

import pysam

__author__ = "Aakrosh Ratan"
__email__  = "ratan@bx.psu.edu"

# do we want the debug information to be printed?
debug_flag = False

# globals 
mincov = 90.0
minidnt = 95.0
numprocesses = 1
chunksize = 100000

# the reference sequence
reference = {}

# tid 2 name mapping for the reference sequences
names = {}

# the total length of the reference
dblen = 0

# taxonomy ids of the sequence in the reference
taxid = {}
taxNm = None

# do I need to update the taxon file
update = False

class Alignment:
    def __init__(self, aln):
        self.qname = aln.qname
        self.tid   = aln.tid
        self.cigar = aln.cigar
        self.pos   = aln.pos
        self.is_unmapped = aln.is_unmapped
        self.is_qcfail = aln.is_qcfail
        self.is_duplicate = aln.is_duplicate
        self.is_secondary = aln.is_secondary
        self.is_reverse = aln.is_reverse
        self.seq = aln.seq
        self.tags = []
        for x,y in aln.tags:
            self.tags.append((x,y))
        self.aend = aln.aend
        self.query_length = aln.query_length

class Features:
    pass

def PrintAlignment(aln, ftrs, indx):
    '''Print alignment in BLAST tabular format.
    
    The expected fields are:
        queryId,subjectId,percIdentity,alnLength,mismatchCount,gapOpenCount, 
        queryStart,queryEnd,subjectStart,subjectEnd,eVal,bitScore
    '''
    output = []
    output.append(aln.qname+"/"+indx)
    output.append(names[aln.tid])
    output.append(str(ftrs.identity))
    output.append(str(ftrs.qalen))
    output.append(str(ftrs.mmcount))
    output.append(str(ftrs.gapopens))
    output.append(str(ftrs.qstart))
    output.append(str(ftrs.qend))
    output.append(str(ftrs.rstart))
    output.append(str(ftrs.rend))
    output.append(str(ftrs.eval))
    output.append(str(ftrs.bitscore))
    output.append(taxid[names[aln.tid]])
    print "\t".join(output)
    
def NextSequenceAlignments(bam1File, bam2File):
    last1 = None
    last2 = None

    finish1 = False
    finish2 = False

    while True:
        # get the alignments for the next read from the first file
        aln1s = [last1] if last1 != None else []
        while True:
            try:
                aln = Alignment(bam1File.next())
            except StopIteration:
                finish1 = True
                break

            if last1 == None: 
                last1 = aln
            if aln.qname != last1.qname:
                last1 = aln
                break
            else:
                aln1s.append(aln)
           
        # get the alignments for the next read from the second file
        aln2s = [last2] if last2 != None else []
        while True:
            try:
                aln = Alignment(bam2File.next())
            except StopIteration:
                finish2 = True
                break

            if last2 == None: 
                last2 = aln
            if aln.qname != last2.qname:
                last2 = aln
                break
            else:
                aln2s.append(aln)
        
        yield aln1s,aln2s        

        if finish1 or finish2:
            assert finish1 == finish2
            raise StopIteration

def CalculateAlnLength(cigar):
    '''Return the length of the aligned query sequence using the CIGAR string.
    '''
    matches = 0

    for op,oplen in cigar:
        if op in [0,1,7,8]:
            matches += oplen

    return matches

def CalculatePid(aln, qseq):
    '''Return the % identity of this alignment.
    '''
    ops = aln.cigar
    
    refindx = aln.pos
    qryindx = 0
    match = 0
    mismatch = 0
    gapopens = 0
    qstart = -1
    qend = -1

    for op,length in ops:
        if op == 0 or op == 7 or op == 8:
            if qstart == -1: qstart = qryindx + 1
            for i in range(0, length):
                r = reference[names[aln.tid]][refindx].upper()
                q = qseq[qryindx].upper()
                if (r not in ["A","C","G","T"]) or \
                   (q not in ["A","C","G","T"]) or \
                   (r == q):
                    match += 1
                else:
                    mismatch += 1
                refindx += 1
                qryindx += 1
                qend = qryindx
        elif op == 1:
            gapopens += 1
            qryindx += length
            qend += length
        elif op == 2:
            gapopens += 1
            refindx += length
        elif op == 3:
            refindx += length
            print >> stderr, "Untested option: CIGAR : BAM_CREF_SKIP"
        elif op == 4:
            qryindx += length
        elif op == 5:
            qryindx += length
        elif op == 6:
            print >> stderr, "Untested option: CIGAR : BAM_CPAD"
            pass

    return qstart,qend,mismatch,gapopens,round(match * 100.0 / (match + mismatch),2)

def QualifiedAlignments(alns):
    '''Return the next alignment that passes our thresholds.
    '''
    for aln in alns:
        if aln.is_unmapped: continue
        if aln.is_qcfail: continue
        if aln.is_duplicate: continue

        ftrs = Features()

        query_alignment_length = CalculateAlnLength(aln.cigar)
        if aln.is_secondary:
            if aln.is_reverse == alns[0].is_reverse:
                qseq = alns[0].seq
            else:
                qseq = fastasequence.reverse_complement(alns[0].seq)
        else:
            qseq = aln.seq

        coverage = query_alignment_length * 100.0 / alns[0].query_length
        qstart,qend,mmcount,gapopens,identity = CalculatePid(aln, qseq)
        if debug_flag:
            print >> stderr, aln.qname, aln.cigar
            print >> stderr, "\t",query_alignment_length, alns[0].query_length
            print >> stderr, "\t",qstart,qend,mmcount,gapopens,identity

        for x,y in aln.tags:
            if x == 'AS':
                score = y
        
        ftrs.identity = identity    
        ftrs.qalen = query_alignment_length 
        ftrs.mmcount = mmcount
        ftrs.gapopens = gapopens
        ftrs.qstart = qstart
        ftrs.qend = qend
        ftrs.rstart = aln.pos + 1
        ftrs.rend = aln.aend
        l = 0.625 # selected these values from blastn page for now.
        k = 0.41
        bitscore = round(((l*float(score))-log(k))/log(2),2)
        ftrs.bitscore = bitscore
        pval = k*exp(-l*score)
        ftrs.eval = pval * alns[0].query_length * dblen

        if coverage >= mincov and identity >= minidnt:
            yield aln,ftrs

def MaxOuterDistance(aln1, aln2):
    '''Return the maximum outer distance between the two alignments.
    '''
    assert aln1.tid == aln2.tid
    a1,b1 = aln1.pos,aln1.aend
    a2,b2 = aln2.pos,aln2.aend
    assert a1 < b1
    assert a2 < b2
    if a1 <= a2:
        assert b2-a1 > 0
        return b2-a1
    else:
        assert b1-a2 > 0
        return b1-a2

def GetTaxId(idnt, outfile):
    '''Get the taxonomic id for this reference sequence.
    '''
    try:
        gi = idnt.split("|")[1] 
    except IndexError:
        # looks like the db has accession numbers instead of GI
        gi = idnt.strip()
    
    cmd = "curl -s \"http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=nuccore&id=%s&rettype=fasta&retmode=xml\" | grep \"TSeq_taxid\" | cut -d '>' -f 2 | cut -d '<' -f 1" % gi
    out = check_output(cmd, shell = True)
    if outfile != None:
        print >> outfile, "%s %s" % (idnt, out.strip())
    return out

def ProcessPair(alns):
    aln1s,aln2s = alns
    assert aln1s[0].qname == aln2s[0].qname
    qaln1 = []
    qaln2 = []
    laln1s = list(QualifiedAlignments(aln1s))
    laln2s = list(QualifiedAlignments(aln2s))

    for aln1,ftrs1 in laln1s:
        for aln2,ftrs2 in laln2s:
            if (aln1.tid == aln2.tid):
                qaln1.append((aln1,ftrs1))
                qaln2.append((aln2,ftrs2))

    return qaln1,qaln2

def Chunker(bam1File, bam2File, chunksize):
    chunk = []
    numread = 0

    for aln1s,aln2s in NextSequenceAlignments(bam1File, bam2File):
        chunk.append((aln1s,aln2s))
        numread += 1
        if numread == chunksize:
            yield chunk
            chunk = []
            numread = 0

    if numread > 0:
        yield chunk

    raise StopIteration       

def main(refName, aln1Name, aln2Name):
    global taxNm
    global taxid
    global dblen

    # read the taxids from the optional file, if the user specified one
    if taxNm != None:
        file = open(taxNm, "r")
        for line in file:
            idnt,tax = line.strip().split()
            taxid[idnt] = tax
        file.close() 

    records   = fasta(refName)
    file = None
    if update == True:
        file = open(taxNm, "a")

    for i,r in enumerate(records):
        s = r.fastasequence
        idnt = s.name.split()[0]
        reference[idnt] = s.seq
        names[i] = idnt
        dblen += len(s.seq)
        if idnt not in taxid: 
            taxid[idnt] = GetTaxId(idnt, file).strip()
    records.close()
    print >> stderr, "Read the reference sequence"
    
    bam1File = pysam.Samfile(aln1Name, "rb")
    bam2File = pysam.Samfile(aln2Name, "rb")
    pool = Pool(numprocesses)

    for chunk in Chunker(bam1File, bam2File, chunksize):
        result = pool.map(ProcessPair,chunk)
        for qaln1,qaln2 in result:
            if len(qaln1) > 0 or len(qaln2) > 0:
                for aln,ftrs in qaln1:
                    PrintAlignment(aln, ftrs, "1")
                for aln,ftrs in qaln2:
                    PrintAlignment(aln, ftrs, "2")

    bam1File.close()
    bam2File.close()

if __name__ == "__main__":
    try:
        opts, args = getopt(argv[1:], "hdc:i:t:up:s:",["help", "debug", "minCoverage=", "minIdentity=", "taxonFile=", "updateTaxonFile", "numProcesses=", "chunkSize="])
    except GetoptError, err:
        print str(err)
        print >> stderr, __doc__
        exit(2) 

    for o, a in opts:
        if o in ("-h", "--help"):
            print >> stderr, __doc__
            exit()
        elif o in ("-d", "--debug"):
            debug_flag = True
        elif o in ("-c", "--minCoverage"):
            mincov = float(a)
        elif o in ("-i", "--minIdentity"):
            minidnt = float(a)
        elif o in ("-t", "--taxonFile"):
            taxNm = a
        elif o in ("-u", "--updateTaxonFile"):
            update = True
        elif o in ("-p", "--numProcesses"):
            numprocesses = int(a)
        elif o in ("-s", "--chunkSize"):
            chunksize = int(a)
        else:
            assert False, "unhandled option"

    if len(args) != 3:
        print >> stderr, __doc__
        exit(3)

    if update == True and taxNm == None:
        print >> stderr, "Please use the argument -t to provide the name of a taxon file" 
        exit(4)

    main(args[0], args[1], args[2])

#!/usr/bin/env python

"""
    usage:
        update_taxid_db [options] db.fa.fai

    where the options are:
        -h,--help : print usage and quit
        -d,--debug: print debug information
    
    This program updates the GI <-> Taxon mapping found using eutils. db.fai 
    represents a fasta index file of the database that will be used with 
    find_concordant_assignments script. One can create the *.fai file using the 
    following command:

    samtools faidx db.fa

    Alternatively, find_concordant_assignments can be used with "-u" in
    conjuction with the -t argument. If an entry in the taxon file is missing, 
    then the tool tries to update it. 
    
    I strongly recommend running this script to create an updated taxon mapping
    to avoid overhead when using find_concordant_assignments
"""

from sys import argv, stderr, stdin, exit, stdout
from getopt import getopt, GetoptError
from subprocess import check_output, CalledProcessError, STDOUT
from time import sleep

import shlex
import re

__author__ = "Aakrosh Ratan"
__email__  = "ratan@bx.psu.edu"

# do we want the debug information to be printed?
debug_flag = False

def GetTaxId(gi):
    '''Get the taxonomic id for this reference sequence.
    '''
    cmd = "curl -s \"http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=nuccore&id=%s&rettype=fasta&retmode=xml\"" % gi
    args = shlex.split(cmd)
    
    out = ""
    try:
        out = check_output(cmd, shell = True)
    except CalledProcessError as e:
        print >> stderr, "Command failed with msg: %s" % e 

    taxid = None
    for line in out.split():
        if line.find("TSeq_taxid") != -1:
            m = re.match("<TSeq_taxid>(\d+)</TSeq_taxid>", line.strip())       
            taxid = int(m.group(1))

    return taxid   

def main(dbName):
    file = open(dbName, "r")

    for line in file:
        idnt = line.strip().split()[0]
        try:
            gi = idnt.split("|")[1]
        except IndexError:
            # looks like the db has accession numbers instead of GI
            gi = idnt.strip()
        taxon = GetTaxId(gi)

        if taxon == None:
            # if I fail I am going to wait for a while, then retry. This will be
            # done at most 5 times
            maxtries = 5
            numtries = 1
            while taxon == None and numtries < maxtries:
                sleep(10)
                taxon = GetTaxId(gi)
                numtries += 1

        if taxon == None:
            print >> stderr, "Did not find taxid for %s, please add it to the file" % gi
        else:
            print gi,taxon

    file.close()

if __name__ == "__main__":
    try:
        opts, args = getopt(argv[1:], "hd",["help", "debug"])
    except GetoptError, err:
        print str(err)
        print >> stderr, __doc__
        exit(2) 

    for o, a in opts:
        if o in ("-h", "--help"):
            print >> stderr, __doc__
            exit()
        elif o in ("-d", "--debug"):
            debug_flag = True
        else:
            assert False, "unhandled option"

    if len(args) != 1:
        print >> stderr, __doc__
        exit(3)

    main(args[0])
